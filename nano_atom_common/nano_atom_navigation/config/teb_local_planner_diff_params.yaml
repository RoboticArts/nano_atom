base_local_planner: teb_local_planner/TebLocalPlannerROS

TebLocalPlannerROS:


  map_frame: $(arg prefix)map   

  # Trajectory

  teb_autosize: true
  dt_ref: 0.25 # Important: number of arrows in the local path
  dt_hysteresis: 0.1
  min_samples: 3
  global_plan_overwrite_orientation: true
  global_plan_viapoint_sep: 0.5 # negative, do not use viapoints. positive, use them. the actual value does not matter
  max_global_plan_lookahead_dist: 0.75  # Important: local path distance
  force_reinit_new_goal_dist: 1.0
  feasibility_check_no_poses: 5  # Number of warnings  "trajectory is not feasible. Resetting planner...""

  publish_feedback: false
  shrink_horizon_backup: true
  allow_init_with_backwards_motion: true
  exact_arc_length: false
  shrink_horizon_min_duration: 10

  # Robot

  max_vel_x: 0.25           # m/s
  max_vel_x_backwards: 0.25 # m/s
  max_vel_theta: 1.0        # rad/s
  max_vel_y: 0.0            # Only holonomic
  acc_lim_y: 0.0            # Only holonomic
  acc_lim_x: 0.2            # m/s
  acc_lim_theta: 0.2        # m/s
  min_turning_radius: 0.0   # Only car-like
  wheelbase: 0.0            # not used, is differential
  cmd_angle_instead_rotvel: false # not used, is differential
  
  footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
    type: "circular"
    radius: 0.06
    #line_start: [-0.06, 0.0] # for type "line"
    #line_end: [0.06, 0.0] # for type "line"
    #type: "circular"
    #radius: 0.5 # for type "circular"
    #front_offset: 0.2 # for type "two_circles"
    #front_radius: 0.2 # for type "two_circles"
    #rear_offset: 0.2 # for type "two_circles"
    #rear_radius: 0.2 # for type "two_circles"
    #vertices: [ [0.25, -0.05], [0.18, -0.05], [0.18, -0.18], [-0.19, -0.18] ] # for type "polygon"

  # GoalTolerance
  xy_goal_tolerance: 0.1    # Final position error in meters
  yaw_goal_tolerance: 0.5   # Final orientation error in rad
  free_goal_vel: false      # Use max_vel to reach the goal

  # Obstacles
  min_obstacle_dist: 0.05 # minimum distance to obstacle: it depends on the footprint_model
  costmap_obstacles_behind_robot_dist: 3.0 # distance at which obstacles behind the robot are taken into account
  inflation_dist: 0.35 # greater than min_obstacle_dist to take effect

  include_costmap_obstacles: true # use the local costmap
  obstacle_poses_affected: 30 # unused if legacy_obstacle_association is false
  legacy_obstacle_association: false
  obstacle_association_force_inclusion_factor: 1.5 # the obstacles that will be taken into account are those closer than min_obstacle_dist*factor, if legacy is false
  obstacle_association_cutoff_factor: 5.0 # the obstacles that are further than min_obstacle_dist * factor will not be taken into account, if legacy is false
  
  
  # Costmap converter

  costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
  #costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSRANSAC"
  #costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSMCCH"
  #costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSConcaveHull"
  #costmap_converter_plugin: "" # deactivate plugin
  costmap_converter_spin_thread: true
  costmap_converter_rate: 5
  
  costmap_converter/CostmapToPolygonsDBSMCCH:
    cluster_max_distance: 0.1  # Important param, limits the robot in narrow spaces
    cluster_min_pts: 2
    cluster_max_pts: 30
    convex_hull_min_pt_separation: 0.1


  # Optimization

  no_inner_iterations: 5
  no_outer_iterations: 4
  optimization_activate: true # optimize
  optimization_verbose: false
  penalty_epsilon: 0.1
  weight_max_vel_x: 1.0
  weight_max_vel_y: 0.0  # Only holonomic
  weight_max_vel_theta: 1.0
  weight_acc_lim_x: 1.0
  weight_acc_lim_y: 0.0  # Only holonomic
  weight_acc_lim_theta: 1.0
  weight_kinematics_nh: 10000 # is a nonholonomic robot
  weight_kinematics_forward_drive: 10000.0 # prefer forward driving, for differential
  weight_kinematics_turning_radius: 0.0 # prefer turns that respect the min_turning_radius, not used if differential (min_turning_radius = 0)
  weight_optimaltime: 10 # prefer trajectories with less transition time
  weight_obstacle: 1000 # prefer trajectories that respect the min_obstacle_dist
  weight_inflation: 1.7 # prefer trajectories that respect the inflation of the obstacles
  weight_viapoint: 1 # prefer trajectories that respect the viapoints in the global path
  weight_adapt_factor: 2 # factor to multiply some weights (currently only weight_obstacle) at each iteration (gives better results than a huge value for the weight)

  # Homotopy Class Planner

  enable_homotopy_class_planning: false # currently not used
  simple_exploration: false
  enable_multithreading: true
  max_number_classes: 4
  selection_cost_hysteresis: 1.0
  selection_obst_cost_scale: 4.0
  selection_viapoint_cost_scale: 1.0
  selection_alternative_time_cost: false
  roadmap_graph_no_samples: 15
  roadmap_graph_area_width: 6
  h_signature_prescaler: 1.0
  h_signature_threshold: 0.1
  obstacle_heading_threshold: 0.45
  roadmap_graph_no_samples: 15
  roadmap_graph_area_width: 5
  obstacle_keypoint_offset: 0.1
  visualize_hc_graph: false
